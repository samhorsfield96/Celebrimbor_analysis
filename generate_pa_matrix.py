import argparse
import pandas as pd
import json

def get_options():
    description = 'Generates ORFs from a Bifrost graph.'
    parser = argparse.ArgumentParser(description=description,
                                     prog='ggcaller')

    IO = parser.add_argument_group('Input/Output options')
    IO.add_argument('--infile',
                    default=None,
                    required=True,
                    help='.tsv file generated by mmseqs2 ')
    IO.add_argument('--outpref',
                    default="gene_pa",
                    help='Output prefix. Default = "gene_pa"')

    return parser.parse_args()

def parse_mmseqs(infile, outpref):
    all_genomes = set()
    cluster_dict = {}

    with open(infile, "r") as f:
        for line in f:
            split_line = line.rstrip()
            split_line = split_line.split("\t")
            centroid = split_line[0]
            member = split_line[-1]

            # get all genomes
            member_genome = member.split(".")[0]
            all_genomes.add(member_genome)

            if centroid not in cluster_dict:
                cluster_dict[centroid] = []

            cluster_dict[centroid].append(member)

    # save cluster assignments
    with open(outpref + '.json', 'w') as fp:
        json.dump(cluster_dict, fp)

    # save gene pa
    all_genomes_list = list(all_genomes)
    all_genomes_dict = {k: v for v, k in enumerate(all_genomes_list)}

    pa_dict = {}
    #pa_dict["Genomes"] = all_genomes_list
    for centroid, cluster in cluster_dict.items():
        centroid_list = [0] * len(all_genomes_list)

        for member in cluster:
            member_genome = member.split(".")[0]
            centroid_list[all_genomes_dict[member_genome]] = 1

        pa_dict[centroid] = centroid_list

    # generate dataframe and assing rows as genomes
    pa_mat = pd.DataFrame.from_dict(pa_dict)
    pa_mat.index = all_genomes_list

    pa_mat.to_csv(outpref + "gene_pa.csv")

def main():
    options = get_options()
    infile = options.infile
    outpref = options.outpref

    parse_mmseqs(infile, outpref)


if __name__ == "__main__":
    main()